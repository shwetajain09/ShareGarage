c
@book.avatar = URI.parse(image_url)
add_author(@book,book.authors)
URI.parse(image_url)
@book.avatar 
book.authors.kind_of?(Array)
image_url.present?
URI.parse(image_url)
@book.avatar = URI.parse(image_url)
URI.parse(image_url)
require 'open-uri'
@book.avatar = URI.parse(image_url)
image_url = book.image_link(:zoom => 2)
@book.language = language
language.save!
language = Language.find_or_initialize_by(:locale => book.language)
@book.attributes = {:title => book.title,:google_provided_rating => book.average_rating,:description => book.description,:subtitle => book.title,:link=> book.info_link,:publisher => book.publisher,:published_date => book.published_date,:page_count => book.page_count,:count => 1,:json_details=>book.to_json,:isbn => book.isbn.presence || book.other_identifier}
@book = Book.new(:google_id => book.id)
@book.avatar = URI.parse(image_url)
image_url = book.image_link(:zoom => 2)
book.image_link(:zoom => 2)
book.id
c
params
book = GoogleBooks.search("id:#{params[:google_id]}").first
result = Net::HTTP.get(url)
url = URI.parse(params[:info_link])
c
result = Net::HTTP.get(url)
url = URI.parse(params[:info_link])
url = URI.parse("https://books.google.co.in/books?id=a_SWCQAAQBAJ&amp;dq=paper+town&amp;hl=en&amp;source=gbs_api")
url = URI.parse("https://books.google.co.in/books?id=a_SWCQAAQBAJ&amp;dq=paper+town&amp;hl=en&amp;source=gbs_api\")
result = Net::HTTP.get(url)
url = URI.parse(params[:info_link])
url = URI.parse('http://www.example.com/index.html')
result = Net::HTTP.get(http://books.google.co.in/books?id=a_SWCQAAQBAJ&dq=paper+town&hl=&source=gbs_api)
params[:info_link]
result = Net::HTTP.get(params[:info_link])
result = Net::HTTP.get(parmas[:info_link])
client = HTTPClient.new
uri
result = Net::HTTP.get(uri)
response.body
response.methods
response.to_json
response.book
response = open(uri).read
response = open('http://example.com').read
res = Net::HTTP.start(uri.host, uri.port) {|http| http.request(req) }
res = Net::HTTP.start(url.host, url.port) {|http| http.request(req) }
res = Net::HTTP.start(url.host, url.port) {|http|
req = Net::HTTP::Get.new(uri.to_s)
req = Net::HTTP::Get.new(url.to_s)
GET "https://www.googleapis.com/books/v1/volumes/volumeId"
GET https://www.googleapis.com/books/v1/volumes/volumeId
response = http.request(request)
request = Net::HTTP::Post.new(uri.request_uri)
request = Net::HTTP::Post.new(uri.request_uri
response = http.request(uri)
response = http.request(uri(
response.bodyresponse = http.request(
response = http.request(request)
request.set_form_data({"user[name]" => "testusername", "user[email]" => "testemail@yahoo.com"})
response = http.request(request)
response.body
response = http.request(request)
request = Net::HTTP::Post.new(uri.request_uri)
http = Net::HTTP.new(uri.host, uri.port)
uri = URI.parse("https://books.google.com/ebooks?id=buc0AAAAMAAJ&dq=holmes&as_brr=4&source=webstore_bookcard")
")uri = URI.parse("https://books.google.com/ebooks?id=buc0AAAAMAAJ&dq=holmes&as_brr=4&source=webstore_bookcard
https://books.google.com/ebooks?id=buc0AAAAMAAJ&dq=holmes&as_brr=4&source=webstore_bookcard
c
GoogleBooks::API.search('Douglas Rockford')
require 'google/api_client/auth/installed_app'
require 'google/api_client/client_secrets'
require 'google/api_client'
GoogleBooks::API.search('Douglas Rockford')
c
GoogleBooks::API.search('Douglas Rockford')
c
GoogleBooks::API.search('Douglas Rockford')
c
GoogleBooks::API.search('Douglas Rockford')
https://www.googleapis.com/books/v1/volumes/volumeId
params
book = GoogleBooks.search(params[:book_title]).first
book = GoogleBooks.search(params[:book_title],{:info_link=>params[:info_link]}).first
book = GoogleBooks.search({:info_link=>params[:info_link]}).first
book = GoogleBooks.search({:info_link=>"#{params[:info_link]}"}).first
book = GoogleBooks.search({:info_link=>#{params[:info_link]}}).first
book = GoogleBooks.search("{:info_link=>#{params[:info_link]}}").first
params[:info_link]
book = GoogleBooks.search("#{params[:info_link]}").first
book = GoogleBooks.search("#{params[:info_link].to_s}").first
book = GoogleBooks.search(params[:info_link]).first
book
book = GoogleBooks.search("info_link:params[:info_link].to_s").first
book = GoogleBooks.search("info_link:#{params[:info_link].to_s}").first
book = GoogleBooks.search("info_link:#{params[:info_link]}").first
book = GoogleBooks.search("info_link:(params[:info_link])").first
book = GoogleBooks.search("info_link:params[:info_link]").first
params[:info_link]
book = GoogleBooks.search("info_link:#{params[:info_link]}").first
params[:google_id]
book = GoogleBooks.search("info_link['id']:#{params[:google_id]}").first
book.info_link
book.methods
book = GoogleBooks.search("paper town").first
book = GoogleBooks.search("info_link['id']:#{params[:google_id]}").first
book = GoogleBooks.search("info_link['id']:#{params[:google_id]}")
book = GoogleBooks.search("info_link:#{params[:info_link]}")
book = GoogleBooks.search("info_link:#{params[:info_link]}").first
params[:info_link]
book = GoogleBooks.search("info_link:#{params[:info_link]}").first
book.nil? && params[:google_id].present?
params[:isbn].present?
params
c
params
parax
c
params
c
params
c
params
c
@book = Book.find_by_google_id(params[:google_id])
params
book = GoogleBooks.search("params[:google_id]").first
book = GoogleBooks.search("volume_id:#{params[:google_id]}").first
book = GoogleBooks.search(params[:google_id]).first
book = GoogleBooks.search("#{params[:google_id]}").first
book = GoogleBooks.search("params[:google_id]").first
params
params[:google_id]
book = GoogleBooks.search("id:#{params[:google_id]}").first
params[:google_id].present?
book.nil?
params[:isbn].present?
params[:isbn]
c
current_user.reward_received.present?
current_user.reward_received
current_user.got_reward
c
current_user.reward_received.present?
current_user.reward_received
current_user.reward_received?
c
if nil puts "s" end
current_user.reward_received
c
current_user.reward_received
current_user.got_reward
c
current_user.reward_received
current_user.got_reward
current_user
c
current_user.methods
current_user.got_reward_changed?
current_user
current_user.got_reward
current_user.got_reward?
c
User.find_by_id(params[:format])
User.find(params[:format])
params[:format]
params
c
comment.user
comment
c
parents.compact.empty?
parents.compact.nil?
parents.compact
parents.size
parents.size?
parents.nil?
parents = loc.collect(&:parent).uniq
 loc.collect(&:parent).uniq
loc
c
loc.collect(&:parent).uniq
book_user.locations << loc
loc = Location.include(&:parent).where('id in (?)',params[:location_ids]).uniq
params
@book
c
book
c
params
book
c
GoogleBooks.search("isbn:#{book.isbn}").first
GoogleBooks.search("id:4JEnMQEACAAJ&dq").first
GoogleBooks.search("id:4JEnMQEACAAJ&dq")
book = GoogleBooks.search("isbn:9780141345659").first
GoogleBooks.search("id:#{params[:google_id]}")
params
book = GoogleBooks.search("id:#{params[:google_id]}").first
c
book
c
@requested_to_user
c
@requested_to_user == false
@requested_to_user
c
user_id
self.owner
(self.owner == user_id) 
 !self.is_redeemed
(self.owner == user_id) && !self.is_redeemed
user_id
c
params[:user_id]
params[:user]
params
c
(@book.respond_to? :avatar)
@book.respond_to? :avatar
@book
c
@books.first(2)
c
@books.first(2)
@books.last
@books.first.methods
@books.first
c
@book.titles_array
@book.title
@book.methods
@book
c
@comments.first.get_downvotes.size
@comments.first.get_upvotes.size
@comments.first.get_likes
@comments.first.get_dislikes
@comments.first
@comments = Comment.where(:commentable_id => @book.id,:commentable_type => 'book')
@comments.first
@comments.first.vote
@comments.first.methods
@comments = Comment.where(:commentable_id => @book.id,:commentable_type => 'book').includes(:vote)
@comments.first.methods
@comments.first
@comments.first.get_dislikes
@comments = Comment.where(:commentable_id => @book.id,:commentable_type => 'book').includes(:votes)
@comments = Comment.where(:commentable_id => @book.id,:commentable_type => 'book')
@book = Book.find(params[:id])
@comments = Comment.where(:commentable_id => params[:id]).includes(:votes)
@comments
@dislikes = @comment.get_downvotes.size
