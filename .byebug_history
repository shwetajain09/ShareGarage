c
book
c
params
book
c
GoogleBooks.search("isbn:#{book.isbn}").first
GoogleBooks.search("id:4JEnMQEACAAJ&dq").first
GoogleBooks.search("id:4JEnMQEACAAJ&dq")
book = GoogleBooks.search("isbn:9780141345659").first
GoogleBooks.search("id:#{params[:google_id]}")
params
book = GoogleBooks.search("id:#{params[:google_id]}").first
c
book
c
@requested_to_user
c
@requested_to_user == false
@requested_to_user
c
user_id
self.owner
(self.owner == user_id) 
 !self.is_redeemed
(self.owner == user_id) && !self.is_redeemed
user_id
c
params[:user_id]
params[:user]
params
c
(@book.respond_to? :avatar)
@book.respond_to? :avatar
@book
c
@books.first(2)
c
@books.first(2)
@books.last
@books.first.methods
@books.first
c
@book.titles_array
@book.title
@book.methods
@book
c
@comments.first.get_downvotes.size
@comments.first.get_upvotes.size
@comments.first.get_likes
@comments.first.get_dislikes
@comments.first
@comments = Comment.where(:commentable_id => @book.id,:commentable_type => 'book')
@comments.first
@comments.first.vote
@comments.first.methods
@comments = Comment.where(:commentable_id => @book.id,:commentable_type => 'book').includes(:vote)
@comments.first.methods
@comments.first
@comments.first.get_dislikes
@comments = Comment.where(:commentable_id => @book.id,:commentable_type => 'book').includes(:votes)
@comments = Comment.where(:commentable_id => @book.id,:commentable_type => 'book')
@book = Book.find(params[:id])
@comments = Comment.where(:commentable_id => params[:id]).includes(:votes)
@comments
@dislikes = @comment.get_downvotes.size
@likes = @comment.get_upvotes.size
@dislikes = @comment.get_downvotes.size
@likes = @comment.get_upvotes.size
c
 current_user.voted_up_for? book
c
current_user.voted_up_for? book
c
params[:vote] == "true"
params[:vote] == true
params
@book.get_likes
@book.likes
current_user.voted_up_for? @book
c
params[:vote] 
params[:vote]?
if params[:vote]?
if params[:vote] puts "s" end
if params[:vote]
params
c
current_user.voted_up_for?(book)
@book.disliked_by current_user
current_user.voted_up_for?(book)
current_user.voted_up_for? book
c
current_user.voted_up_for? book
book
current_user.voted_up_on? book
c
@book
commentable
c
render :partial => 'comments/form', :locals => {:commentable => @book}
@book
c
commentable
c
commentable.class.to_s.underscore
c
current_user.tokens
c
current_user.tokens
c
current_user.tokens
c
current_user.tokens.locked
current_user.tokens
c
current_user.tokens
current_user.tokens.locked
c
book.display
book.object_id
book.object
book.description
book.info_link
book.methods
book.user_info
book
book.average_rating
book.rating
book.reviews
book
c
@books.methods
@books.per_page
@books.entries.count
@books.entries
@books.total_items
@books.entries.count
@books.entries
@books.methods
@books = GoogleBooks.search("#{params[:book_query]}", {:count => 9})
@books=_
GoogleBooks.search("#{params[:book_query]}", {:count => 9})
@books
c
respond_to do |format| format.html end
respond_to do |format|
respond_to
request.xhr?
stored_location_for(resource)
request.referer
request.referer == sign_in_url
 sign_in_url = new_user_session_url
request.referer == sign_in_url
equest.referer == sign_in_url
request.xhr?equest.referer == sign_in_url
request.xhr?
request.url
request
c
User.find_by_id(params[:id])
User.find(params[:id])
params
@user
c
@user.avatar
@user
c
options[:google_id]
options.keys
options
c
options.keys
options.has_key?(:google_id)
options.key
options.values[0][:google_id]
options.values[0]
options.values[:google_id]
options.values
options
options.values
options.methods
options
options[:google_id]
options
c
l = (local_assigns.has_key? :action) ? action : :get
(local_assigns.has_key? :action) ? action : :get
local_assigns.has_key? :action ? action : :get
action
local_action = local_assigns.has_key? :action ? action : :get
c
local_assigns.has_key? :action
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
c
params
@book.present?
c
params
c
 @errors = @user.errors.full_messages
 @errors = @user.errors.full_message.join(',')
c
params
request
params
resource
c
@books.first.average_rating
@books.first.methods
@books.first.rating
@books.first
@books
c
params
c
book
Tagging.all
Taggings.all
User.all
Tag.all
@book.tags << 'Music'
@book.categories
@book = Book.first
book.categories
book.me
book.category
book
book = GoogleBooks.search("id:#{params[:google_id]}").first
@book
c
self.create_profile(:location_id => loc.id)
Profile.all
self.create_profile(:location_id => loc)
loc = Location.find_by_name(AppConfiguration::DEFAULT_LOCATION)
c
book.tags
book.categories
